import React from "react";
import ReactWordcloud from "react-wordcloud";
import map from "./mapping.json";

var En_Stopwords = [
  "i",
  "me",
  "my",
  "myself",
  "we",
  "our",
  "ours",
  "ourselves",
  "you",
  "you're",
  "you've",
  "you'll",
  "you'd",
  "your",
  "yours",
  "yourself",
  "yourselves",
  "he",
  "him",
  "his",
  "himself",
  "she",
  "she's",
  "her",
  "hers",
  "herself",
  "it",
  "it's",
  "its",
  "itself",
  "they",
  "them",
  "their",
  "theirs",
  "themselves",
  "what",
  "which",
  "who",
  "whom",
  "this",
  "that",
  "that'll",
  "these",
  "those",
  "am",
  "is",
  "are",
  "was",
  "were",
  "be",
  "been",
  "being",
  "have",
  "has",
  "had",
  "having",
  "do",
  "does",
  "did",
  "doing",
  "a",
  "an",
  "the",
  "and",
  "but",
  "if",
  "or",
  "because",
  "as",
  "until",
  "while",
  "of",
  "at",
  "by",
  "for",
  "with",
  "about",
  "against",
  "between",
  "into",
  "through",
  "during",
  "before",
  "after",
  "above",
  "below",
  "to",
  "from",
  "up",
  "down",
  "in",
  "out",
  "on",
  "off",
  "over",
  "under",
  "again",
  "further",
  "then",
  "once",
  "here",
  "there",
  "when",
  "where",
  "why",
  "how",
  "all",
  "any",
  "both",
  "each",
  "few",
  "more",
  "most",
  "other",
  "some",
  "such",
  "no",
  "nor",
  "not",
  "only",
  "own",
  "same",
  "so",
  "than",
  "too",
  "very",
  "s",
  "t",
  "can",
  "will",
  "just",
  "don",
  "don't",
  "should",
  "should've",
  "now",
  "d",
  "ll",
  "m",
  "o",
  "re",
  "ve",
  "y",
  "ain",
  "aren",
  "aren't",
  "couldn",
  "couldn't",
  "didn",
  "didn't",
  "doesn",
  "doesn't",
  "hadn",
  "hadn't",
  "hasn",
  "hasn't",
  "haven",
  "haven't",
  "isn",
  "isn't",
  "ma",
  "mightn",
  "mightn't",
  "mustn",
  "mustn't",
  "needn",
  "needn't",
  "shan",
  "shan't",
  "shouldn",
  "shouldn't",
  "wasn",
  "wasn't",
  "weren",
  "weren't",
  "won",
  "won't",
  "wouldn",
  "wouldn't"
];

var Fa_Stopwords = [
  "و",
  "در",
  "به",
  "از",
  "كه",
  "مي",
  "اين",
  "است",
  "را",
  "با",
  "هاي",
  "براي",
  "آن",
  "يك",
  "شود",
  "شده",
  "خود",
  "ها",
  "كرد",
  "شد",
  "اي",
  "تا",
  "كند",
  "بر",
  "بود",
  "گفت",
  "نيز",
  "وي",
  "هم",
  "كنند",
  "دارد",
  "ما",
  "كرده",
  "يا",
  "اما",
  "بايد",
  "دو",
  "اند",
  "هر",
  "خواهد",
  "او",
  "مورد",
  "آنها",
  "باشد",
  "ديگر",
  "مردم",
  "نمي",
  "بين",
  "پيش",
  "پس",
  "اگر",
  "همه",
  "صورت",
  "يكي",
  "هستند",
  "بي",
  "من",
  "دهد",
  "هزار",
  "نيست",
  "استفاده",
  "داد",
  "داشته",
  "راه",
  "داشت",
  "چه",
  "همچنين",
  "كردند",
  "داده",
  "بوده",
  "دارند",
  "همين",
  "ميليون",
  "سوي",
  "شوند",
  "بيشتر",
  "بسيار",
  "روي",
  "گرفته",
  "هايي",
  "تواند",
  "اول",
  "نام",
  "هيچ",
  "چند",
  "جديد",
  "بيش",
  "شدن",
  "كردن",
  "كنيم",
  "نشان",
  "حتي",
  "اينكه",
  "ولی",
  "توسط",
  "چنين",
  "برخي",
  "نه",
  "ديروز",
  "دوم",
  "درباره",
  "بعد",
  "مختلف",
  "گيرد",
  "شما",
  "گفته",
  "آنان",
  "بار",
  "طور",
  "گرفت",
  "دهند",
  "گذاري",
  "بسياري",
  "طي",
  "بودند",
  "ميليارد",
  "بدون",
  "تمام",
  "كل",
  "تر  براساس",
  "شدند",
  "ترين",
  "امروز",
  "باشند",
  "ندارد",
  "چون",
  "قابل",
  "گويد",
  "ديگري",
  "همان",
  "خواهند",
  "قبل",
  "آمده",
  "اكنون",
  "تحت",
  "طريق",
  "گيري",
  "جاي",
  "هنوز",
  "چرا",
  "البته",
  "كنيد",
  "سازي",
  "سوم",
  "كنم",
  "بلكه",
  "زير",
  "توانند",
  "ضمن",
  "فقط",
  "بودن",
  "حق",
  "آيد",
  "وقتي",
  "اش",
  "يابد",
  "نخستين",
  "مقابل",
  "خدمات",
  "امسال",
  "تاكنون",
  "مانند",
  "تازه",
  "آورد",
  "فكر",
  "آنچه",
  "نخست",
  "نشده",
  "شايد",
  "چهار",
  "جريان",
  "پنج",
  "ساخته",
  "زيرا",
  "نزديك",
  "برداري",
  "كسي",
  "ريزي",
  "رفت",
  "گردد",
  "مثل",
  "آمد",
  "ام",
  "بهترين",
  "دانست",
  "كمتر",
  "دادن",
  "تمامي",
  "جلوگيري",
  "بيشتري",
  "ايم",
  "ناشي",
  "چيزي",
  "آنكه",
  "بالا",
  "بنابراين",
  "ايشان",
  "بعضي",
  "دادند",
  "داشتند",
  "برخوردار",
  "نخواهد",
  "هنگام",
  "نبايد",
  "غير",
  "نبود",
  "ديده",
  "وگو",
  "داريم",
  "چگونه",
  "بندي",
  "خواست",
  "فوق",
  "ده",
  "نوعي",
  "هستيم",
  "ديگران",
  "همچنان",
  "سراسر",
  "ندارند",
  "گروهي",
  "سعي",
  "روزهاي",
  "آنجا",
  "يكديگر",
  "كردم",
  "بيست",
  "بروز",
  "سپس",
  "رفته",
  "آورده",
  "نمايد",
  "باشيم",
  "گويند",
  "زياد",
  "خويش",
  "همواره",
  "گذاشته",
  "شش  نداشته",
  "شناسي",
  "خواهيم",
  "آباد",
  "داشتن",
  "نظير",
  "همچون",
  "باره",
  "نكرده",
  "شان",
  "سابق",
  "هفت",
  "دانند",
  "جايي",
  "بی",
  "جز",
  "زیرِ",
  "رویِ",
  "سریِ",
  "تویِ",
  "جلویِ",
  "پیشِ",
  "عقبِ",
  "بالایِ",
  "خارجِ",
  "وسطِ",
  "بیرونِ",
  "سویِ",
  "کنارِ",
  "پاعینِ",
  "نزدِ",
  "نزدیکِ",
  "دنبالِ",
  "حدودِ",
  "برابرِ",
  "طبقِ",
  "مانندِ",
  "ضدِّ",
  "هنگامِ",
  "برایِ",
  "مثلِ",
  "بارة",
  "اثرِ",
  "تولِ",
  "علّتِ",
  "سمتِ",
  "عنوانِ",
  "قصدِ",
  "روب",
  "جدا",
  "کی",
  "که",
  "چیست",
  "هست",
  "کجا",
  "کجاست",
  "کَی",
  "چطور",
  "کدام",
  "آیا",
  "مگر",
  "چندین",
  "یک",
  "چیزی",
  "دیگر",
  "کسی",
  "بعری",
  "هیچ",
  "چیز",
  "جا",
  "کس",
  "هرگز",
  "یا",
  "تنها",
  "بلکه",
  "خیاه",
  "بله",
  "بلی",
  "آره",
  "آری",
  "مرسی",
  "البتّه",
  "لطفاً",
  "ّه",
  "انکه",
  "وقتیکه",
  "همین",
  "پیش",
  "مدّتی",
  "هنگامی",
  "مان",
  "تان"
];

const options = {
  colors: [
    "#405DE6",
    "#5851DB",
    "#833AB4",
    "#C13584",
    "#E1306C",
    "#FD1D1D",
    "#F56040",
    "#F77737",
    "#FCAF45",
    "#FFDC80"
  ],
  padding: 4,
  enableTooltip: false,
  fontFamily: "Koodakbold,Righteous",
  fontSizes: [16, 48],
  // deterministic: true,
  // fontStyle: "normal",
  // fontWeight: "normal",
  rotations: 0,
  rotationAngles: [0, 0],
  // scale: "sqrt",
  // spiral: "rectangular",
  spiral: "archimedean",
  transitionDuration: 500
};

function hasNumber(myString) {
  return /\d/.test(myString);
}

function normalize(text) {
  return text
    .split("")
    .map(function(c) {
      var mapped = map[c.charCodeAt(0)];
      return typeof mapped === "undefined" ? " " : mapped;
    })
    .join("");
}

export default class CloudWords extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      isLoading: true,
      options: options
    };
  }

  componentDidMount() {
    var TotalPostWords = [];
    this.props.data.Medias.edges.forEach(x => {
      var edges = x.node.edge_media_to_caption.edges;
      if (edges.length > 0 && edges[0].node.text !== "") {
        var ranges = [
          "\ud83c[\udf00-\udfff]", // U+1F300 to U+1F3FF
          "\ud83d[\udc00-\ude4f]", // U+1F400 to U+1F64F
          "\ud83d[\ude80-\udeff]" // U+1F680 to U+1F6FF
        ];
        var caption = edges[0].node.text.replace(
          new RegExp(ranges.join("|"), "g"),
          " "
        );
        TotalPostWords = TotalPostWords.concat(caption.split(/\s+/));
      }
    });
    var wordsMap = {};
    TotalPostWords.forEach(function(key) {
      if (key.charAt(0) !== "@") {
        var word_clean = key
          .trim()
          .replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, "");

        if (word_clean === "" || /\d/.test(word_clean)) {
        } else {
          if (wordsMap.hasOwnProperty(word_clean)) {
            wordsMap[word_clean]++;
          } else {
            wordsMap[word_clean] = 1;
          }
        }
      }
    });
    var cloudwords = [];
    for (var word in wordsMap) {
      var value_count = wordsMap[word];
      if (
        value_count > 2 &&
        !En_Stopwords.includes(word.trim().toLowerCase()) &&
        !Fa_Stopwords.includes(normalize(word.trim()))
      ) {
        cloudwords.push({
          text: word.charAt(0).toUpperCase() + word.substr(1),
          value: value_count
        });
      }
    }
    cloudwords.sort((a, b) => (a.value < b.value ? 1 : -1));

    this.setState({ cloudwords: cloudwords, isLoading: false });

    // console.log(document.getElementById("rwc"));
    // document.getElementById("rwc").children[0].height = "200px";
  }

  render() {
    if (this.state.isLoading) {
      return (
        <div className="text-center mx-auto">
          <div className="spinner-grow text-primary" role="status">
            <span className="sr-only">Loading...</span>
          </div>
        </div>
      );
    }
    return (
      <div
        id="rwc"
        className="card border-0"
        style={{
          // height: "300px",
          // width: "100%",
          // opacity: 0.7
          backgroundColor: "rgba(255, 255, 255, 0.7)"
        }}
      >
        <div className="card-body p-1">
          <ReactWordcloud
            maxWords="20"
            options={this.state.options}
            words={this.state.cloudwords}
          />
        </div>
      </div>
    );
  }
}
